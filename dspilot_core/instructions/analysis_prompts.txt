다음 사용자 요청을 분석하여 실행 계획을 수립해주세요.

사용자 요청: {user_message}

사용 가능한 도구들:
{tools_desc}

도구 사용이 필요한 경우 실행 계획을 수립하세요. 그렇지 않으면 null을 반환하세요.

**🚨 중요한 참조 규칙 (반드시 준수):**
- 이전 단계의 결과를 참조할 때는 반드시 "$step_N" 형식을 사용하세요 (예: "$step_1", "$step_2")
- 파일명이나 콘텐츠에서 이전 단계 결과를 사용할 때도 "$step_N" 형식만 사용하세요
- <오늘날짜>, <생성된_콘텐츠> 같은 의미적 플레이스홀더는 절대 사용하지 마세요
- "이전 단계의 결과를 바탕으로", "앞서 검색한 내용을" 같은 설명문도 절대 사용하지 마세요
- 구체적인 값이 필요하면 해당 값을 제공하는 도구를 먼저 실행하고 "$step_N"으로 참조하세요

**🔥 절대 금지 사항:**
- ❌ 잘못된 예: {"path": "이전 단계의 날짜를 기준으로 계산된 어제날짜.md"}
- ❌ 잘못된 예: {"content": "이전 단계의 검색 결과를 바탕으로 블로그 형식으로 요약된 뉴스"}
- ✅ 올바른 예: {"path": "$step_1.md"}
- ✅ 올바른 예: {"content": "$step_2"}

**검색 도구 사용 시 최적화 지침:**
- 사용자 요청을 그대로 검색어로 사용하지 마세요
- 핵심 키워드를 추출하여 효과적인 검색 쿼리를 생성하세요
- IT 뉴스 요청 시: "최신 IT 기술 동향", "인공지능 최신 뉴스", "클라우드 기술 동향" 등 구체적 키워드 사용
- 특정 사이트 검색이 필요한 경우: "site:zdnet.co.kr" 형태의 사이트 제한 연산자 활용
- 시간 필터가 있는 검색 도구는 적절한 time_period 설정 (day, week, month)
- 검색 결과 수는 요청된 건수보다 여유있게 설정 (3건 요청 시 5-10건으로 설정)

**코드/파일 수정 요청 처리 지침 (매우 중요):**
코드나 파일의 내용을 수정해야 하는 모든 요청은 다음의 **명확한 2단계 계획**을 따라야 합니다. 이는 에이전트의 잘못된 추론과 환각을 방지하기 위한 필수 규칙입니다.

1.  **1단계: 파일 읽기 (`read_file`)**
    *   **목적**: 수정할 파일의 현재 내용 전체를 정확하게 파악합니다.
    *   **도구**: `read_file` 도구를 사용해야 합니다.
    *   **결과**: 이 단계의 결과물 (예: `$step_1.content`)은 2단계의 유일한 입력값이 됩니다.

2.  **2단계: 수정 후 전체 내용 덮어쓰기 (`coder_tool.write_file_with_content`)**
    *   **목적**: 1단계에서 읽은 내용을 바탕으로 **모든 문제점을 수정한 후, 파일의 최종 완성본을 만들어 덮어씁니다.**
    *   **도구**: 반드시 `coder_tool.write_file_with_content` 도구만을 사용해야 합니다. `apply_diff_patch`나 다른 도구를 사용해서는 안 됩니다.
    *   **인자 생성 규칙 (필수!):**
        *   `file_path`: 1단계에서 사용한 파일 경로와 동일해야 합니다.
        *   `content`: **가장 중요한 부분입니다.** 1단계의 내용(`$step_1.content`)을 면밀히 분석하여, 모든 버그, 오타, 로직 오류 등을 수정한 **완전한 최종 코드 전체**를 이 인자에 담아야 합니다. 부분적인 코드 조각이나 diff를 넣어서는 절대 안 됩니다. LLM은 이 `content`를 생성하는 데 모든 추론 능력을 사용해야 합니다.

**계획 수립 예시:**
*   **사용자 요청**: "my_script.py 파일의 버그를 고쳐줘."
*   **올바른 계획**:
    1.  `read_file`을 사용하여 `my_script.py`를 읽는다.
    2.  `coder_tool.write_file_with_content`를 사용하여, 1단계 내용을 기반으로 수정된 **전체 코드**를 `content` 인자에 담아 `my_script.py`에 쓴다.

**잘못된 계획 예시 (절대 금지):**
*   `read_file` 없이 `write_file_with_content`를 사용하는 것.
*   `write_file_with_content` 대신 `apply_diff_patch` 나 다른 파일 수정 도구를 사용하는 것.
*   `content` 인자에 수정 사항의 일부나 diff, 또는 불완전한 코드를 넣는 것.

**검색 키워드 최적화 예시:**
- 사용자 요청: "오늘의 IT 뉴스를 찾아줘"
- 최적화된 쿼리: "최신 IT 기술 뉴스 인공지능 클라우드 사이버보안"

**응답 형식 (JSON):**
{{
    "need_tools": true/false,
    "plan": {{
        "description": "실행 계획 설명",
        "steps": [
            {{
                "step": 1,
                "description": "단계 설명",
                "tool_name": "도구명",
                "arguments": {{"arg": "value"}},
                "confirm_message": "사용자에게 표시할 확인 메시지"
            }}
        ]
    }}
}}

**✅ 올바른 placeholder 사용법:**
- 파일명: {{"path": "$step_1.md"}}
- 콘텐츠: {{"content": "$step_2"}}
- 이전 단계 참조: {{"data": "$step_1"}}

**❌ 잘못된 예시 (절대 금지):**
- 파일명: {{"path": "이전 단계의 날짜를 기준으로 한 파일.md"}}
- 콘텐츠: {{"content": "앞서 검색한 뉴스를 요약한 내용"}}
- 검색어: {{"query": "오늘의 AI 뉴스를 찾아줘"}}

반드시 JSON 형식으로만 응답하세요. 